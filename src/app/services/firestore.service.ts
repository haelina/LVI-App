import { Injectable } from '@angular/core';
import {
  collection,
  addDoc,
  where,
  query,
  doc,
  setDoc,
  getDoc,
} from '@firebase/firestore';
import { AuthenticationService } from './authentication.service';
import { collectionData, docData, Firestore } from '@angular/fire/firestore';
import WorkerEntry from '../interfaces/Workerentry';
import JobEntry from '../interfaces/JobEntry';
import { Observable } from 'rxjs';
import Userdetails from '../interfaces/Userdetails';
import TraineeEntry from '../interfaces/TraineeEntry';

@Injectable({
  providedIn: 'root',
})
/**
 * Service for database connection to Google Firebase Cloud Firestore.
 * Contains CRUD operations for managing data in database.
 */
export class FirestoreService {
  constructor(
    private authService: AuthenticationService,
    private firestore: Firestore
  ) {}

  /**
   * This adds a document with logged in user's uid to collection workers.
   * Each worker has one document in workers collection.
   * Document gets overwritten every time when new updates are sent.
   *
   * @param worker - Data to be sent to database.
   */
  async addWorker(worker: WorkerEntry) {
    await setDoc(
      doc(this.firestore, 'workers', this.authService.currentUserUid()),
      worker
    );
  }

  /**
   * Adds a new document with autogenerated id to collection jobs.
   */
  async addJob(job: JobEntry) {
    await addDoc(collection(this.firestore, 'jobs'), job);
  }

  /**
   * Get all worker or trainee documents from firestore.
   *
   * @param isTrainee - boolean value
   * @returns array of worker data or trainee data depending on given
   * param value
   */
  getWorkers(isTrainee: boolean): Observable<WorkerEntry[]> {
    const workerRef = query(
      collection(this.firestore, 'workers'),
      where('isTrainee', '==', isTrainee)
    );
    return collectionData(workerRef) as Observable<WorkerEntry[]>;
  }

  /**
   * Get all job entries from firestore.
   *
   * @returns array of job entries
   */
  getJobs(): Observable<JobEntry[]> {
    const jobsRef = collection(this.firestore, 'jobs');
    return collectionData(jobsRef) as Observable<JobEntry[]>;
  }

  /**
   * Add additional info about user to collection userdetails.
   * Adds a new document with logged in user's uid. Each user has
   * only one reference in collection userdetails and the data gets
   * overwritten on update.
   *
   * @param details - details to be sent to firestore
   */
  async addUserdetail(details: Userdetails) {
    await setDoc(
      doc(this.firestore, 'userdetails', this.authService.currentUserUid()),
      details
    );
  }

  /**
   * Get userdetails of currently logged in user with user's uid.
   *
   * @returns Observable that implements Userdetails interface
   */
  /* Currently not used by anything
  getUserDetail(): Observable<Userdetails> {
    const userdetailRef = doc(
      this.firestore,
      'userdetails',
      this.authService.currentUserUid()
    );
    return docData(userdetailRef) as Observable<Userdetails>;
  }
  */

  async getUser(): Promise<Userdetails | null> {
    const docRef = doc(
      this.firestore,
      'userdetails',
      this.authService.currentUserUid()
    );
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      console.log('Document data:', docSnap.data());
      return docSnap.data() as Userdetails;
    } else {
      // doc.data() will be undefined in this case
      console.log('No such document!');
      return null;
    }
  }

  async getWorker(): Promise<WorkerEntry | null> {
    const docRef = doc(
      this.firestore,
      'workers',
      this.authService.currentUserUid()
    );
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      console.log('Document data:', docSnap.data());
      return docSnap.data() as WorkerEntry;
    } else {
      // doc.data() will be undefined in this case
      console.log('No such document!');
      return null;
    }
  }

  /**
   * This adds a document with logged in user's uid to collection trainees.
   * Each trainee has one document in trainees collection.
   * Document gets overwritten every time when new updates are sent.
   *
   * @param trainee - Data to be sent to database.
   */
  async addTrainee(trainee: TraineeEntry) {
    await setDoc(
      doc(this.firestore, 'trainees', this.authService.currentUserUid()),
      trainee
    );
  }

  async getTrainee(): Promise<TraineeEntry | null> {
    const docRef = doc(
      this.firestore,
      'trainees',
      this.authService.currentUserUid()
    );
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      console.log('Document data:', docSnap.data());
      return docSnap.data() as TraineeEntry;
    } else {
      // doc.data() will be undefined in this case
      console.log('No such document!');
      return null;
    }
  }
}
